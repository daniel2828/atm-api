import { Injectable } from '@nestjs/common';
import { CreateCardDto } from '../interfaces/createCard.dto';
import { Card } from '../models/card.schema';
import { AccountsService } from './accounts.service';
import { GraphQLError } from 'graphql';
import { Account } from '../models/account.schema';
import { encryptPin, generateRandomNumber } from '../helpers/helpers';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { UpdateCardDto } from '../interfaces/updateCard.dto';
import { TransactionDto } from '../interfaces/transaction.dto';
import { TransactionType } from '../models/models.enums';

@Injectable()
export class AtmService {
  constructor(
    private readonly accountService: AccountsService,
    @InjectModel(Card.name) private cardModel: Model<Card>,
  ) {}
  async createCard(createCardDto: CreateCardDto): Promise<Card> {
    const { accountId } = createCardDto;
    const account: Account =
      await this.accountService.getAccountById(accountId);

    if (!account) {
      throw new GraphQLError('Account not found');
    }
    const autogeneratedPin: string = `${generateRandomNumber(4)}`;
    const pinHash = await encryptPin(autogeneratedPin);

    const createdCard = new this.cardModel({
      pinHash,
      cardNumber: `${generateRandomNumber(16)}`,
      isActivated: false,
      limit: 6000,
      accountId,
    });
    await createdCard.save();
    await this.accountService.addCardToAccount(accountId, createdCard.id);

    return createdCard;
  }

  async updateCard(updateCardDto: UpdateCardDto) {
    return await this.cardModel
      .findByIdAndUpdate(updateCardDto.cardId, updateCardDto)
      .exec();
  }

  async deposit(transactionDto: TransactionDto) {
    const { cardId, quantity } = transactionDto;
    const card = await this.cardModel.findById(cardId);

    return await this.accountService.addTransactionToAccount(
      card.accountId,
      quantity,
      TransactionType.DEPOSIT,
    );
  }
  async withdrawal(transactionDto: TransactionDto) {
    const { cardId, quantity } = transactionDto;
    const card = await this.cardModel.findById(cardId);

    return await this.accountService.addTransactionToAccount(
      card.accountId,
      quantity,
      TransactionType.WITHDRAWAL,
    );
  }
}
